1) Install the controller.
$ argo install

If the cluster has legacy authentication disabled, create
a service account and binding with admin privileges, and
specify the service account during install.

$ kubectl create serviceaccount --namespace kube-system argo
$ kubectl create clusterrolebinding argo-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:argo
$ argo install --service-account argo


2) Submit some examples
$ argo submit https://raw.githubusercontent.com/argoproj/argo/master/examples/hello-world.yaml
$ argo submit https://raw.githubusercontent.com/argoproj/argo/master/examples/coinflip.yaml
$ argo submit https://raw.githubusercontent.com/argoproj/argo/master/examples/loops-maps.yaml


3) Install an artifact repository
$ helm init
$ helm install stable/minio --name argo-artifacts


4) Login to minio and create a bucket (my-bucket)
$ minikube service list
Minio default credentials:
AKIAIOSFODNN7EXAMPLE
wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY


5) Reconfigure controller to use artifact repository
Look at minio created resources
# kubectl get all -l release=argo-artifacts
$ kubectl edit configmap workflow-controller-configmap

    artifactRepository:
      s3:
        bucket: my-bucket
        endpoint: argo-artifacts-minio-svc:9000
        insecure: true
        accessKeySecret:
          name: argo-artifacts-minio-user
          key: accesskey
        secretKeySecret:
          name: argo-artifacts-minio-user
          key: secretkey
    executorImage: jessesuen/argoexec:latest

$ kubectl delete pod <controller-pod>


6) Submit artifact workflow example
$ argo submit examples/artifact-passing.yaml
